{"version":3,"sources":["utils/cyberway.js","components/transactionView.js","components/parseErrorView.js","components/signingForm.js","components/signing.js","navbar.js","templates/cyberway.js","components/templates/cyberway/bidname.js","components/templates/overview.js","App.js","serviceWorker.js","index.js"],"names":["HOST","sendTransaction","key","trx","host","a","rpc","JsonRpc","signatureProvider","JsSignatureProvider","api","Api","textDecoder","TextDecoder","textEncoder","TextEncoder","transact","blocksBehind","expireSeconds","results","console","log","isWif","privWif","sha256","inp","crypto","createHash","update","digest","bufWif","Buffer","bs58","decode","privKey","slice","checksum","newChecksum","toString","e","sendRequest","uri","data","myRequest","Request","method","mode","headers","body","JSON","stringify","fetch","response","ok","json","TransactionView","props","className","role","trJson","ParseErrorView","class","parseError","SigningForm","useState","setKey","keyStyle","setKeyStyle","htmlFor","type","id","placeholder","value","onChange","ev","newKey","target","onClick","submit","Signing","params","queryString","parse","window","location","search","tr","then","r","catch","error","NavBar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","aria-haspopup","aria-labelledby","bidname","bidder","newname","bid","parseFloat","toFixed","QUERY_URI","QUERY_PARAM","code","scope","table","lower_bound","upper_bound","limit","index","encode_type","reverse","show_payer","BidName","setBidder","setNewname","setBid","bids","setBids","useEffect","rows","fetchData","min","to","CyberwayTemplates","GolosTemplates","TemplateOverview","App","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c74a1ca.chunk.js","sourcesContent":["\nimport { JsonRpc, Api } from 'cyberwayjs';\nimport { TextEncoder, TextDecoder } from 'text-encoding';\nimport JsSignatureProvider from 'cyberwayjs/dist/eosjs-jssig';\nimport crypto from \"crypto\";\nimport axios from \"axios\";\n\nimport bs58 from \"bs58\";\n\nconst HOST = 'https://node-cyberway.golos.io';\n\nexport async function sendTransaction(key, trx, host) {\n  const rpc = new JsonRpc(host || HOST);\n  const signatureProvider = new JsSignatureProvider([key]);\n\n  const api = new Api({\n    rpc,\n    signatureProvider,\n    textDecoder: new TextDecoder(),\n    textEncoder: new TextEncoder(),\n  });\n\n  const results = await api.transact(trx, {\n    blocksBehind: 5,\n    expireSeconds: 3600,\n  });\n\n  console.log(\"sendgtransaction: results\", results);\n  return results;\n}\n\n\nexport function isWif(privWif) {\n  var isWif = false;\n  const sha256 = (inp) => {\n    return crypto.createHash(\"sha256\").update(inp).digest();\n  }\n  try {\n    var bufWif = new Buffer(bs58.decode(privWif));\n    var privKey = bufWif.slice(0, -4);\n    var checksum = bufWif.slice(-4);\n    var newChecksum = sha256(privKey);\n    newChecksum = sha256(newChecksum);\n    newChecksum = newChecksum.slice(0, 4);\n    if (checksum.toString() == newChecksum.toString()) {\n      isWif = true;\n    }\n  } catch (e) {\n  }\n  return isWif;\n};\n\nexport async function sendRequest(uri, data) {\n  \n    const myRequest = new Request(HOST + uri, {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n\n    const response = await fetch(myRequest);\n      console.log(uri, data, response);\n      if(!response.ok) {\n          return {}\n      }\n      return await response.json();\n  \n      \n/*\n  return new Promise((resolve,reject) => {\n    var url = 'https://node-cyberway.golos.io/v1/chain/get_table_rows';\n\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", url, true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xhr.onload = function () {\n      console.log(xhr);\n      resolve(xhr.response);\n    };\n\n    xhr.onerror = function () {\n      console.log(xhr)\n      reject(Error(\"error xhr\"))\n    };\n\n    xhr.send(JSON.stringify(data));\n  });\n  */\n}\n","import React from \"react\";\n\nexport default \nfunction TransactionView(props) {    \n    return (\n        <div className=\"\">\n            <div className=\"alert alert-primary\" role=\"alert\">\n                <h4>Content</h4>\n            </div>\n            <div>\n                <pre  >\n                    {JSON.stringify(props.trJson, null, 2)}\n                </pre>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\n\nexport default \nfunction ParseErrorView(props) {  \n    return (\n        <div className=\"p-2 border\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n                <h4>Erroneous transaction</h4>\n            </div>\n            <div>\n                <p class=\" text-danger font-weight-bold\">{props.parseError}</p>\n            </div>\n        </div>\n    );\n}","import React, {useState} from \"react\";\nimport {isWif} from \"../utils/cyberway\";\n\nexport default\nfunction SigningForm(props) {\n\n    const [key, setKey] = useState(\"\");\n    const [keyStyle, setKeyStyle] = useState(\"form-control\")\n    \n    let keyInfo = \"\";\n\n    const onChangeKey = (ev) => {\n        const newKey = ev.target.value;\n        if(!isWif(newKey)) {\n            setKeyStyle(\"form-control is-invalid\");\n        } else {\n            setKeyStyle(\"form-control is-valid\");\n        }\n        setKey(newKey);\n    }\n\n    return (\n        <form>\n            <div className=\"alert alert-primary\" role=\"alert\">\n                <h4>Signature</h4>\n            </div>\n\n        <div className=\"form-group\">\n            <label htmlFor=\"private_key\">Private key</label>\n            <input type=\"password\" className={keyStyle} id=\"private_key\" placeholder=\"Private key\" \n                value={key} onChange={onChangeKey}/>\n            <small id=\"passwordHelpBlock\" className=\"form-text text-muted\">\n                For signing a private key required.\n            </small>\n        </div>\n        <button onClick={() => props.submit(key)} type=\"button\" className=\"btn btn-primary\">Submit</button>\n    </form>\n    );\n}","\nimport React from \"react\";\nimport queryString from \"query-string\";\nimport TransactionView from \"./transactionView\";\nimport ParseErrorView from \"./parseErrorView\";\nimport SigningForm from \"./signingForm\";\n\nimport {sendTransaction} from \"../utils/cyberway\";\n\n\nexport default\n    function Signing(props) {\n\n    const params = queryString.parse(window.location.search);\n    let trJson = null;\n    let parseError = null;\n    if (params.tr) {\n        try {\n            trJson = JSON.parse(params.tr)\n        } catch (e) {\n            parseError = e + \"\";\n        }\n    }\n\n    if(parseError) {\n        return ( <ParseErrorView parseError={parseError} /> );\n    }\n\n    if(!trJson) {\n        return ( <ParseErrorView parseError={\"Please provide parameter 'tr' with a transaction\"} /> );\n    }\n\n    const doSubmit = (key) => {\n        console.log(\"submit\", trJson);\n        sendTransaction(key, trJson)\n            .then((r) => console.log(\"result\", r))\n            .catch(e => console.error(\"error\", \"\"+e));\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12 p-2 border \">\n                    <SigningForm submit={doSubmit} />\n                </div>\n            </div>\n            <div className=\"row mt-2\">\n                <div className=\"col-sm-12 p-2 border \">\n                    <TransactionView trJson={trJson} />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\n\nexport default function NavBar(props) {\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-2\">\n            <a className=\"navbar-brand\" href=\"/\">CyberSig</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item dropdown\">\n                        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" \n                            role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Tools\n                        </a>\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                            <a className=\"dropdown-item\" href=\"/templates\">Templates</a>\n                            <a className=\"dropdown-item\" href=\"/exec\">Execute contract action</a>\n                            <div className=\"dropdown-divider\"></div>\n                            <a className=\"dropdown-item\" href=\"/create_key\">Create key</a>\n                            <a className=\"dropdown-item\" href=\"/associate\">Associate key</a>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            </nav>\n    );\n}","\n\nexport function bidname(bidder, newname, bid) {\n    \n    return {\n        \"actions\": [{\n            \"account\": \"cyber\",\n            \"name\": \"bidname\",\n            \"authorization\": [{\n                \"actor\": \"zhm555xmzkd3\",\n                \"permission\": \"active\"\n              }\n            ],\n            \"data\": {bidder, newname, bid:parseFloat(bid).toFixed(4) + \" CYBER\"}\n          }\n        ]\n    }\n}\n\n\n","import React, { useState, useEffect } from \"react\";\nimport { bidname } from \"../../../templates/cyberway\"\nimport { Link } from \"react-router-dom\"\nimport {sendRequest} from \"../../../utils/cyberway\";\n\nconst QUERY_URI = \"/v1/chain/get_table_rows\";\nconst QUERY_PARAM = {\n    json: true,\n    code: \"cyber\",\n    scope: \"cyber\",\n    table: \"namebids\",\n    lower_bound: null,\n    upper_bound: null,\n    limit: 50,\n    index: \"highbid\",\n    encode_type: \"dec\",\n    reverse: false,\n    show_payer: false\n};\n\nexport default\n    function BidName(props) {\n\n    const [bidder, setBidder] = useState(\"\");\n    const [newname, setNewname] = useState(\"\");\n    const [bid, setBid] = useState(0);\n    const [bids, setBids] = useState({});\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const data = await sendRequest(QUERY_URI, QUERY_PARAM);\n                console.log(data)\n                if(data && data.data && data.data.rows) {\n                    setBids(data.rows);\n                }\n            } catch(e) {\n                \n            }\n        }\n        fetchData();\n    }, []);\n\n    return (\n        <div>\n            <div>\n            <form>\n                <div className=\"alert alert-primary\" role=\"alert\">\n                    <h4>Bidname</h4>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"bidder\">Bidder</label>\n                    <input type=\"text\" className=\"form-control\" id=\"bidder\" placeholder=\"cyberway account\"\n                        value={bidder} onChange={(ev) => setBidder(ev.target.value)} />\n                    <small id=\"bidderHelpBlock\" className=\"form-text text-muted\">\n                        Cyberway account\n                </small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"newname\">Bidder</label>\n                    <input type=\"text\" className=\"form-control\" id=\"newname\" placeholder=\"new cyberway name\"\n                        value={newname} onChange={(ev) => setNewname(ev.target.value)} />\n                    <small id=\"bidderHelpBlock\" className=\"form-text text-muted\">\n                        New cyberway name, max 12 characters. Only following characters are allowed: \"12345abcdefghijklmnopqrstuvwxyz\"\n                </small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"bid\">Bidder</label>\n                    <input type=\"number\" min=\"0\" className=\"form-control\" id=\"bid\" placeholder=\"bid amount\"\n                        value={bid} onChange={(ev) => setBid(ev.target.value)} />\n                    <small id=\"bidderHelpBlock\" className=\"form-text text-muted\">\n                        Bid amount.\n                </small>\n                </div>\n                <Link to={\"/signing?tr=\" + JSON.stringify(bidname(bidder, newname, bid))} type=\"button\" className=\"btn btn-primary\">Sign</Link>\n            </form>\n            </div>\n            <div>\n                <pre>\n                    {JSON.stringify(bids, null, 2)}\n                </pre>\n            </div>\n        </div>\n\n    );\n\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\"\n\nfunction CyberwayTemplates() {\n    return (\n        <div className=\"card-body\">\n            <Link to={\"/templates/cyberway/bidname\"}>bidname</Link>\n        </div>\n    )\n}\n\nfunction GolosTemplates() {\n    return (\n        <div className=\"card-body\">\n            <Link to={\"/templates/golos/upvote\"}>upvote</Link>\n        </div>\n    )\n}\n\nexport default \nfunction TemplateOverview(props) {\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-6 mb-3\">\n                    <h3>Transaction templates</h3>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-6 mb-3\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h4>Cyberway</h4>\n                        </div>                    \n                        <CyberwayTemplates />\n                    </div>\n                </div>\n                <div className=\"col-sm-6 mb-3\">\n                    <div className=\"card\">\n                            <div className=\"card-header\">\n                                <h4>Golos</h4>\n                            </div>                    \n                            <GolosTemplates />\n                        </div>\n                    </div>\n            </div>\n        </div>\n    );\n\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nimport Signing from \"./components/signing\";\nimport NavBar from \"./navbar\";\n\n\nimport Bidname from \"./components/templates/cyberway/bidname\";\nimport TempaltesOverview from \"./components/templates/overview\"\n\nfunction App(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <NavBar />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <div>\n            <Router>\n              <Switch>\n                <Route exact path=\"/\">\n                  <h1>Signing tool for cyberway!</h1>\n                </Route>\n                <Route exact path=\"/signing\">\n                  <Signing props={{ ...props }} />\n                </Route>\n                <Route exact path=\"/templates/\">\n                  <TempaltesOverview props={{ ...props }} />\n                </Route>\n                <Route exact path=\"/templates/cyberway/bidname\">\n                  <Bidname props={{ ...props }} />\n                </Route>\n              </Switch>\n            </Router>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}