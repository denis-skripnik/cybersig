{"version":3,"sources":["components/transactionView.js","components/parseErrorView.js","components/signingForm.js","components/showEosError.js","components/help.js","components/signing.js","App.js","serviceWorker.js","index.js","utils/cyberway.js"],"names":["TransactionView","props","className","role","JSON","stringify","trJson","ParseErrorView","class","parseError","SigningForm","auths","defaultKeys","push","useState","keys","setKeys","console","log","length","map","k","idx","KeyBlock","value","key","auth","onChange","v","newKey","newKeys","onClick","submit","type","setKey","keyStyle","setKeyStyle","htmlFor","id","placeholder","ev","target","isWif","actor","permission","ShowEosError","error","details","m","message","replace","what","Help","transfer","from","to","quantity","memo","href","Signing","result","setResult","setError","params","queryString","parse","window","location","search","tr","e","transaction_id","sendTransaction","then","r","catch","json","extractAuths","actions","a","authorization","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","HOST","trx","host","rpc","JsonRpc","signatureProvider","JsSignatureProvider","api","Api","textDecoder","TextDecoder","textEncoder","TextEncoder","transact","blocksBehind","expireSeconds","results","privWif","sha256","inp","crypto","createHash","update","digest","bufWif","Buffer","bs58","decode","privKey","slice","checksum","newChecksum","toString"],"mappings":"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","file":"static/js/main.7195f452.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default \nfunction TransactionView(props) {    \n    return (\n        <div className=\"\">\n            <div className=\"alert alert-primary\" role=\"alert\">\n                <h4>Content</h4>\n            </div>\n            <div>\n                <pre  >\n                    {JSON.stringify(props.trJson, null, 2)}\n                </pre>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\n\nexport default \nfunction ParseErrorView(props) {  \n    return (\n        <div className=\"p-2 border\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n                <h4>Erroneous transaction</h4>\n            </div>\n            <div>\n                <p class=\" text-danger font-weight-bold\">{props.parseError}</p>\n            </div>\n        </div>\n    );\n}","import React, {useState} from \"react\";\nimport {isWif} from \"../utils/cyberway\";\n\n\nexport default\nfunction SigningForm(props) {\n    const {auths} = props;\n    const defaultKeys = [];\n    for(let a of auths) {defaultKeys.push(\"\");}\n\n    const [keys, setKeys] = useState(defaultKeys);\n\n    const onChange = (idx, newKey) => {\n        const newKeys = [...keys];\n        console.log(\"keys\", keys, \"newKeys\", newKeys, \"idx\", idx, \"newKey\", newKey);\n        newKeys[idx] = newKey;\n        console.log(\"newKeys\", newKeys);\n        setKeys(newKeys);\n    }\n    console.log(\"keys\", keys, keys.length);\n    return (\n        <form>\n            <div className=\"alert alert-primary\" role=\"alert\">\n                <h4>Signature</h4>\n            </div>\n            {keys.map((k,idx) => <KeyBlock value={k} key={\"\"+idx} auth={auths[idx]} onChange={(v) => onChange(idx, v)} />)}\n\n        <button onClick={() => props.submit(keys)} type=\"button\" className=\"btn btn-primary\">Submit</button>\n    </form>\n    );\n}\n\nfunction KeyBlock(props) {\n    const {auth} = props;\n\n    const [key, setKey] = useState(\"\");\n    const [keyStyle, setKeyStyle] = useState(\"form-control\")\n    \n    const onChangeKey = (ev) => {\n        const newKey = ev.target.value;\n        if(!isWif(newKey)) {\n            setKeyStyle(\"form-control is-invalid\");\n        } else {\n            setKeyStyle(\"form-control is-valid\");\n        }\n        setKey(newKey);\n        props.onChange(newKey);\n    }\n\n    return (\n        <div className=\"form-group\">\n            <label htmlFor=\"private_key\">Private key</label>\n            <input type=\"password\" className={keyStyle} id=\"private_key\" placeholder=\"Private key\" \n                value={key} onChange={onChangeKey}/>\n            <small id=\"passwordHelpBlock\" className=\"form-text text-muted\">\n                Private key for actor {auth.actor}, permission {auth.permission}\n            </small>\n        </div>\n    );\n}\n","import React from \"react\";\n\n\nexport default\nfunction ShowEosError(props) {\n    const error = props.error;\n\n    let details = [];\n    if(error.error.details) {\n        details.push(<hr key={\"hd\"}/>);\n        for(let d of error.error.details) {\n            let m = d.message;\n            m = m.replace(\"assertion failure with message: \", \"\");\n            details.push(<p key={m}>{m}</p>);\n            break;\n        }\n    }\n\n\n    return (\n        <div className=\"alert alert-danger\" role=\"alert\">\n        <h4 className=\"alert-heading\">{error.message}</h4>\n        <p>{error.error.what}</p>\n        {details}\n    </div>        \n    )\n}","import React from \"react\";\n\nexport default \nfunction Help() {\n\n    const transfer = {\n        \"actions\": [{\n            \"account\": \"cyber.token\",\n            \"name\": \"transfer\",\n            \"authorization\": [{\n                \"actor\": \"zhm555xmzkd3\",\n                \"permission\": \"active\"\n                }\n            ],\n            \"data\": {from: \"zhm555xmzkd3\", to: \"ropox\", quantity:\"1.0000 CYBER\", memo:\"Memo text\"}\n            }\n        ]\n    };\n\n    return (\n        <div class=\"container\">\n            <p className=\"strong\">This is a simple signing tool. In order to use it, please supply parameter \"tr\" in url with a valid transaction object.</p>\n\n            <p>For example below is a transaction including transfer action</p>\n\n            <div className=\"card\">\n                <div className=\"card-body\">\n                <a className=\"card-link\" href={\"https://gropox.github.io/cybersig?tr=\" + JSON.stringify(transfer)}>Click to try this example</a>\n                <pre className=\"mt-2\">\n                    https://gropox.github.io/cybersig?tr={JSON.stringify(transfer, null, 4)}\n                </pre>\n                </div>\n            </div>\n\n        </div>\n    );\n}","\nimport React, { useState } from \"react\";\nimport queryString from \"query-string\";\nimport TransactionView from \"./transactionView\";\nimport ParseErrorView from \"./parseErrorView\";\nimport SigningForm from \"./signingForm\";\n\nimport { sendTransaction } from \"../utils/cyberway\";\nimport ShowEosError from \"./showEosError\";\nimport Help from \"./help\";\n\nexport default\n    function Signing(props) {\n\n    const [result, setResult] = useState();\n    const [error, setError] = useState();\n\n    const params = queryString.parse(window.location.search);\n    let trJson = null;\n    let parseError = null;\n    if (params.tr) {\n        try {\n            trJson = JSON.parse(params.tr)\n        } catch (e) {\n            parseError = e + \"\";\n        }\n    }\n\n    if (parseError) {\n        return (<ParseErrorView parseError={parseError} />);\n    }\n\n    if (!trJson) {\n        return (\n            <div>\n            <ParseErrorView parseError={\"Please provide parameter 'tr' with a transaction\"} />\n            <Help />\n            </div>\n        );\n    }\n\n    const doSubmit = (keys) => {\n        console.log(\"submit\", trJson);\n        sendTransaction(keys, trJson)\n            .then(r => setResult(r))\n            .catch(e => setError((!!e.json)? e.json : {error:{what:\"\"+e},message:\"Error while signing transaction!\"} ));\n    }\n    error && console.error(\"error\", error);\n    result && console.log(\"result\", result);\n    trJson && console.log(\"trJson\", trJson);\n\n    if (result) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12 p-2 border \">\n                        <div className=\"alert alert-success\" role=\"alert\">\n                            <h4 className=\"alert-heading\">Success</h4>\n                            <p>Transaction <a className=\"alert-link\" target=\"_blank\" href={\"https://explorer.cyberway.io/trx/\" + result.transaction_id}>{result.transaction_id}</a></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row mt-2\">\n                    <div className=\"col-sm-12 p-2 border \">\n                        <TransactionView trJson={trJson} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12 p-2 border \">\n                    <SigningForm submit={doSubmit} auths={extractAuths(trJson)} />\n                </div>\n            </div>\n            {error && (\n                <div className=\"row mt-2\">\n                    <div className=\"col-sm-12 p-2 border \">\n                        <ShowEosError error={error} />\n                    </div>\n                </div>\n            )}\n            <div className=\"row mt-2\">\n                <div className=\"col-sm-12 p-2 border \">\n                    <TransactionView trJson={trJson} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nfunction extractAuths(trJson) {\n    if(!trJson || !trJson.actions || !trJson.actions.length) return [];\n\n    const auths = [];\n    for(let a of trJson.actions) {\n        if(a.authorization && a.authorization.length) {\n            auths.push(...a.authorization);\n        }\n    }\n    return auths;\n}","import React from 'react';\nimport './App.css';\n\nimport Signing from \"./components/signing\";\n\nfunction App(props) {\n  return (\n    <Signing />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","\nimport { JsonRpc, Api } from 'cyberwayjs';\nimport { TextEncoder, TextDecoder } from 'text-encoding';\nimport JsSignatureProvider from 'cyberwayjs/dist/eosjs-jssig';\nimport crypto from \"crypto\";\n\nimport bs58 from \"bs58\";\n\nconst HOST = 'https://node-cyberway.golos.io';\nconst HOST3 = 'http://localhost:8888';\n\nexport async function sendTransaction(keys, trx, host) {\n  const rpc = new JsonRpc(HOST);\n  const signatureProvider = new JsSignatureProvider(keys);\n\n  const api = new Api({\n    rpc,\n    signatureProvider,\n    textDecoder: new TextDecoder(),\n    textEncoder: new TextEncoder(),\n  });\n\n  const results = await api.transact(trx, {\n    blocksBehind: 5,\n    expireSeconds: 3600,\n  });\n\n  return results;\n}\n\nexport function isWif(privWif) {\n  var isWif = false;\n  const sha256 = (inp) => {\n    return crypto.createHash(\"sha256\").update(inp).digest();\n  }\n  try {\n    var bufWif = new Buffer(bs58.decode(privWif));\n    var privKey = bufWif.slice(0, -4);\n    var checksum = bufWif.slice(-4);\n    var newChecksum = sha256(privKey);\n    newChecksum = sha256(newChecksum);\n    newChecksum = newChecksum.slice(0, 4);\n    if (checksum.toString() == newChecksum.toString()) {\n      isWif = true;\n    }\n  } catch (e) {\n  }\n  return isWif;\n};\n\n"],"sourceRoot":""}