{"version":3,"sources":["utils/cyberway.js","components/transactionView.js","components/parseErrorView.js","components/signingForm.js","components/signing.js","navbar.js","templates/cyberway.js","components/templates/cyberway/bidname.js","components/templates/cyberway/bidrefund.js","components/templates/cyberway/transfer.js","components/templates/overview.js","App.js","serviceWorker.js","index.js"],"names":["HOST","sendTransaction","key","trx","host","a","rpc","JsonRpc","signatureProvider","JsSignatureProvider","api","Api","textDecoder","TextDecoder","textEncoder","TextEncoder","transact","blocksBehind","expireSeconds","results","isWif","privWif","sha256","inp","crypto","createHash","update","digest","bufWif","Buffer","bs58","decode","privKey","slice","checksum","newChecksum","toString","e","getTableRows","data","fetch","get_table_rows","resp","rows","TransactionView","props","className","role","JSON","stringify","trJson","ParseErrorView","class","parseError","SigningForm","useState","setKey","keyStyle","setKeyStyle","htmlFor","type","id","placeholder","value","onChange","ev","newKey","target","onClick","submit","Signing","result","setResult","error","setError","params","queryString","parse","window","location","search","tr","console","log","href","transaction_id","then","r","catch","json","what","message","aria-label","aria-hidden","NavBar","data-toggle","data-target","aria-controls","aria-expanded","aria-haspopup","aria-labelledby","bidname","bidder","newname","bid","parseFloat","toFixed","bidrefund","transfer","from","to","amount","asset","memo","quantity","decs","symbol","QUERY_PARAM","code","scope","table","lower_bound","upper_bound","limit","index","encode_type","reverse","show_payer","BidName","setBidder","setNewname","setBid","bids","setBids","useEffect","fetchData","min","map","Math","ceil","high_bid","high_bidder","last_bid_time","ASSETS","GOLOS","CYBER","Transfer","setFrom","setTo","setAmount","setAsset","setMemo","Object","keys","selected","CyberwayTemplates","GolosTemplates","TemplateOverview","App","exact","path","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6bceb310.chunk.js","sourcesContent":["\nimport { JsonRpc, Api } from 'cyberwayjs';\nimport { TextEncoder, TextDecoder } from 'text-encoding';\nimport JsSignatureProvider from 'cyberwayjs/dist/eosjs-jssig';\nimport crypto from \"crypto\";\nimport axios from \"axios\";\n\nimport bs58 from \"bs58\";\n\nconst HOST = 'https://node-cyberway.golos.io';\nconst HOST3 = 'http://localhost:8888';\n\nexport async function sendTransaction(key, trx, host) {\n  const rpc = new JsonRpc(HOST);\n  const signatureProvider = new JsSignatureProvider([key]);\n\n  const api = new Api({\n    rpc,\n    signatureProvider,\n    textDecoder: new TextDecoder(),\n    textEncoder: new TextEncoder(),\n  });\n\n  const results = await api.transact(trx, {\n    blocksBehind: 5,\n    expireSeconds: 3600,\n  });\n\n  return results;\n}\n\n\nexport function isWif(privWif) {\n  var isWif = false;\n  const sha256 = (inp) => {\n    return crypto.createHash(\"sha256\").update(inp).digest();\n  }\n  try {\n    var bufWif = new Buffer(bs58.decode(privWif));\n    var privKey = bufWif.slice(0, -4);\n    var checksum = bufWif.slice(-4);\n    var newChecksum = sha256(privKey);\n    newChecksum = sha256(newChecksum);\n    newChecksum = newChecksum.slice(0, 4);\n    if (checksum.toString() == newChecksum.toString()) {\n      isWif = true;\n    }\n  } catch (e) {\n  }\n  return isWif;\n};\n\nexport async function getTableRows(data) {\n  \n    const rpc = new JsonRpc(HOST, { fetch });  \n\n    const resp = await rpc.get_table_rows(data);\n    if(resp.rows) {\n      return resp.rows;\n    }\n    return [];\n}\n","import React from \"react\";\n\nexport default \nfunction TransactionView(props) {    \n    return (\n        <div className=\"\">\n            <div className=\"alert alert-primary\" role=\"alert\">\n                <h4>Content</h4>\n            </div>\n            <div>\n                <pre  >\n                    {JSON.stringify(props.trJson, null, 2)}\n                </pre>\n            </div>\n        </div>\n    );\n}","import React from \"react\";\n\nexport default \nfunction ParseErrorView(props) {  \n    return (\n        <div className=\"p-2 border\">\n            <div className=\"alert alert-danger\" role=\"alert\">\n                <h4>Erroneous transaction</h4>\n            </div>\n            <div>\n                <p class=\" text-danger font-weight-bold\">{props.parseError}</p>\n            </div>\n        </div>\n    );\n}","import React, {useState} from \"react\";\nimport {isWif} from \"../utils/cyberway\";\n\nexport default\nfunction SigningForm(props) {\n\n    const [key, setKey] = useState(\"\");\n    const [keyStyle, setKeyStyle] = useState(\"form-control\")\n    \n    let keyInfo = \"\";\n\n    const onChangeKey = (ev) => {\n        const newKey = ev.target.value;\n        if(!isWif(newKey)) {\n            setKeyStyle(\"form-control is-invalid\");\n        } else {\n            setKeyStyle(\"form-control is-valid\");\n        }\n        setKey(newKey);\n    }\n\n    return (\n        <form>\n            <div className=\"alert alert-primary\" role=\"alert\">\n                <h4>Signature</h4>\n            </div>\n\n        <div className=\"form-group\">\n            <label htmlFor=\"private_key\">Private key</label>\n            <input type=\"password\" className={keyStyle} id=\"private_key\" placeholder=\"Private key\" \n                value={key} onChange={onChangeKey}/>\n            <small id=\"passwordHelpBlock\" className=\"form-text text-muted\">\n                For signing a private key required.\n            </small>\n        </div>\n        <button onClick={() => props.submit(key)} type=\"button\" className=\"btn btn-primary\">Submit</button>\n    </form>\n    );\n}","\nimport React, { useState } from \"react\";\nimport queryString from \"query-string\";\nimport TransactionView from \"./transactionView\";\nimport ParseErrorView from \"./parseErrorView\";\nimport SigningForm from \"./signingForm\";\n\nimport { sendTransaction } from \"../utils/cyberway\";\n\n\nexport default\n    function Signing(props) {\n\n    const [result, setResult] = useState();\n    const [error, setError] = useState();\n\n    const params = queryString.parse(window.location.search);\n    let trJson = null;\n    let parseError = null;\n    if (params.tr) {\n        try {\n            trJson = JSON.parse(params.tr)\n        } catch (e) {\n            parseError = e + \"\";\n        }\n    }\n\n    if (parseError) {\n        return (<ParseErrorView parseError={parseError} />);\n    }\n\n    if (!trJson) {\n        return (<ParseErrorView parseError={\"Please provide parameter 'tr' with a transaction\"} />);\n    }\n\n    const doSubmit = (key) => {\n        console.log(\"submit\", trJson);\n        sendTransaction(key, trJson)\n            .then(r => setResult(r))\n            .catch(e => setError((!!e.json)? e.json : {error:{what:\"\"+e},message:\"Error while signing transaction!\"} ));\n    }\n    error && console.error(error);\n    result && console.log(result);\n\n    if (result) {\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-sm-12 p-2 border \">\n                        <div className=\"alert alert-success\" role=\"alert\">\n                            <h4 className=\"alert-heading\">Success</h4>\n                            <p>Transaction <a className=\"alert-link\" target=\"_blank\" href={\"https://explorer.cyberway.io/trx/\" + result.transaction_id}>{result.transaction_id}</a></p>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"row mt-2\">\n                    <div className=\"col-sm-12 p-2 border \">\n                        <TransactionView trJson={trJson} />\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12 p-2 border \">\n                    <SigningForm submit={doSubmit} />\n                </div>\n            </div>\n            {error && (\n                <div className=\"row mt-2\">\n                    <div className=\"col-sm-12 p-2 border \">\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={() => setError(null)}>\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>                            \n                            <h4 className=\"alert-heading\">{error.message}</h4>\n                            <p>{error.error.what}</p>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <div className=\"row mt-2\">\n                <div className=\"col-sm-12 p-2 border \">\n                    <TransactionView trJson={trJson} />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\n\n\nexport default function NavBar(props) {\n\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light mb-2\">\n            <a className=\"navbar-brand\" href=\"/\">CyberSig</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item dropdown\">\n                        <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" \n                            role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n                            Tools\n                        </a>\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                            <a className=\"dropdown-item\" href=\"/templates\">Templates</a>\n                            <a className=\"dropdown-item\" href=\"/exec\">Execute contract action</a>\n                            <div className=\"dropdown-divider\"></div>\n                            <a className=\"dropdown-item\" href=\"/create_key\">Create key</a>\n                            <a className=\"dropdown-item\" href=\"/associate\">Associate key</a>\n                        </div>\n                    </li>\n                </ul>\n            </div>\n            </nav>\n    );\n}","\n\nexport function bidname(bidder, newname, bid) {\n    \n    return {\n        \"actions\": [{\n            \"account\": \"cyber\",\n            \"name\": \"bidname\",\n            \"authorization\": [{\n                \"actor\": bidder,\n                \"permission\": \"active\"\n              }\n            ],\n            \"data\": {bidder, newname, bid:parseFloat(bid).toFixed(4) + \" CYBER\"}\n          }\n        ]\n    }\n}\n\nexport function bidrefund(bidder) {\n  return {\n      \"actions\": [{\n          \"account\": \"cyber\",\n          \"name\": \"bidrefund\",\n          \"authorization\": [{\n              \"actor\": bidder,\n              \"permission\": \"active\"\n            }\n          ],\n          \"data\": {bidder}\n        }\n      ]\n  }\n}\n\nexport function transfer(from, to, amount, asset, memo) {\n  \n  const quantity = parseFloat(amount).toFixed(asset.decs) + \" \" + asset.symbol;\n\n  return {\n      \"actions\": [{\n          \"account\": \"cyber.token\",\n          \"name\": \"transfer\",\n          \"authorization\": [{\n              \"actor\": from,\n              \"permission\": \"active\"\n            }\n          ],\n          \"data\": {from, to, quantity, memo}\n        }\n      ]\n  }\n}\n\n","import React, { useState, useEffect } from \"react\";\nimport { bidname } from \"../../../templates/cyberway\"\nimport { Link } from \"react-router-dom\"\nimport {getTableRows} from \"../../../utils/cyberway\";\n\nconst QUERY_PARAM = {\n        json: true,\n        code: \"cyber\",\n        scope: \"cyber\",\n        table: \"namebids\",\n        lower_bound: null,\n        upper_bound: null,\n        limit: 50,\n        index: \"highbid\",\n        encode_type: \"dec\",\n        reverse: false,\n        show_payer: false                   \n};\n\nexport default\n    function BidName(props) {\n\n    const [bidder, setBidder] = useState(\"\");\n    const [newname, setNewname] = useState(\"\");\n    const [bid, setBid] = useState(0);\n    const [bids, setBids] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                const data = await getTableRows(QUERY_PARAM);\n                console.log(data)\n                setBids(data);\n            } catch(e) {\n\n            }\n        }\n        fetchData();\n    }, []);\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12 border\">\n            <form>\n                <div className=\"alert alert-primary\" role=\"alert\">\n                    <h4>Bid for name</h4>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"bidder\">Bidder</label>\n                    <input type=\"text\" className=\"form-control\" id=\"bidder\" placeholder=\"cyberway account\"\n                        value={bidder} onChange={(ev) => setBidder(ev.target.value)} />\n                    <small id=\"bidderHelpBlock\" className=\"form-text text-muted\">\n                        Cyberway account\n                </small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"newname\">New name</label>\n                    <input type=\"text\" className=\"form-control\" id=\"newname\" placeholder=\"new cyberway name\"\n                        value={newname} onChange={(ev) => setNewname(ev.target.value)} />\n                    <small id=\"bidderHelpBlock\" className=\"form-text text-muted\">\n                        New cyberway name, max 12 characters. Only following characters are allowed: \"12345abcdefghijklmnopqrstuvwxyz\"\n                </small>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"bid\">Bid</label>\n                    <input type=\"number\" min=\"0\" className=\"form-control\" id=\"bid\" placeholder=\"bid amount\"\n                        value={bid} onChange={(ev) => setBid(ev.target.value)} />\n                    <small id=\"bidderHelpBlock\" className=\"form-text text-muted\">\n                        Bid amount.\n                </small>\n                </div>\n                <Link to={\"/signing?tr=\" + JSON.stringify(bidname(bidder, newname, bid))} type=\"button\" className=\"btn btn-primary\">Sign</Link>\n            </form>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12 border mt-3\">\n                <div className=\"alert alert-primary\" role=\"alert\">\n                    <h4>Bid queue</h4>\n                </div>\n                <table className=\"table table-sm table-striped table-hover\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Bidder</th>\n                        <th scope=\"col\">Bid</th>\n                        <th scope=\"col\">Bid time</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {bids.map(bid => {\n                        return (<tr key={bid.newname} onClick={() => {setNewname(bid.newname); setBid(Math.ceil(bid.high_bid * 1.1) / 10000)}}>\n                            <td>{bid.newname}</td>\n                            <td>{bid.high_bidder}</td>\n                            <td className=\"text-right\">{(bid.high_bid / 10000).toFixed(4) + \" CYBER\" }</td>\n                            <td>{bid.last_bid_time}</td>\n                        </tr>\n\n                    )})\n                    \n                    }\n                    </tbody>\n                </table>\n                </div>\n            </div>\n        </div>\n\n    );\n\n}","import React, { useState, useEffect } from \"react\";\nimport { bidrefund } from \"../../../templates/cyberway\"\nimport { Link } from \"react-router-dom\"\n\nexport default\n    function BidName(props) {\n\n    const [bidder, setBidder] = useState(\"\");\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12 border\">\n                    <form>\n                        <div className=\"alert alert-primary\" role=\"alert\">\n                            <h4>Refund lost bids</h4>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"bidder\">Bidder</label>\n                            <input type=\"text\" className=\"form-control\" id=\"bidder\" placeholder=\"cyberway account\"\n                                value={bidder} onChange={(ev) => setBidder(ev.target.value)} />\n                            <small id=\"bidderHelpBlock\" className=\"form-text text-muted\">\n                                Cyberway account\n                            </small>\n                        </div>\n                        <Link to={\"/signing?tr=\" + JSON.stringify(bidrefund(bidder))} type=\"button\" className=\"btn btn-primary\">Sign</Link>\n                    </form>\n                </div>\n            </div>\n        </div>\n\n    );\n\n}","import React, { useState, useEffect } from \"react\";\nimport { transfer } from \"../../../templates/cyberway\"\nimport { Link } from \"react-router-dom\"\n\nconst ASSETS = {\n    GOLOS: {decs: 3, symbol: \"GOLOS\"},\n    CYBER: {decs: 4, symbol: \"CYBER\"},\n};\n\nexport default\n    function Transfer(props) {\n\n    const [from, setFrom] = useState(\"\");\n    const [to, setTo] = useState(\"\");\n    const [amount, setAmount] = useState();\n    const [asset, setAsset] = useState(\"CYBER\");\n    const [memo, setMemo] = useState(\"\");\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-12 border\">\n            <form className=\"p-2\">\n                <div className=\"alert alert-primary\" role=\"alert\">\n                    <h4>Transfer</h4>\n                </div>\n\n                <div className=\"form-group\">\n                    <label htmlFor=\"from\">From</label>\n                    <input type=\"text\" className=\"form-control form-control-sm\" id=\"from\" placeholder=\"cyberway account\"\n                        value={from} onChange={(ev) => setFrom(ev.target.value)} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"to\">To</label>\n                    <input type=\"text\" className=\"form-control form-control-sm\" id=\"to\" placeholder=\"cyberway account\"\n                        value={to} onChange={(ev) => setTo(ev.target.value)} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"amount\">Amount</label>\n                    <input type=\"number\" min=\"0\" className=\"form-control form-control-sm\" id=\"bid\" placeholder=\"bid amount\"\n                        value={amount} onChange={(ev) => setAmount(ev.target.value)} />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"asset\">Asset</label>\n                    <select className=\"form-control form-control-sm\" onChange={(ev) => setAsset(ev.target.value)}>\n                        {Object.keys(ASSETS).map(a => {\n                            return (\n                                <option value={a} selected={asset == a}>{a}</option>\n                            );\n                        })}\n                    </select>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"memo\">To</label>\n                    <input type=\"text\" className=\"form-control form-control-sm\" id=\"memo\" placeholder=\"memo\"\n                        value={memo} onChange={(ev) => setMemo(ev.target.value)} />\n                </div>\n                <Link to={\"/signing?tr=\" + JSON.stringify(transfer(from, to, amount, ASSETS[asset], memo))} type=\"button\" className=\"btn btn-primary\">Sign</Link>\n            </form>\n                </div>\n            </div>\n        </div>\n\n    );\n\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\"\n\nfunction CyberwayTemplates() {\n    return (\n        <div className=\"card-body\">\n            <div className=\"row\">\n                <div className=\"col-sm-4\">\n                    <Link to={\"/templates/cyberway/transfer\"}>transfer</Link>\n                </div>\n                <div className=\"col-sm-4\">\n                    <div><Link to={\"/templates/cyberway/bidname\"}>bidname</Link></div>\n                    <div><Link to={\"/templates/cyberway/bidrefund\"}>bidrefund</Link></div>\n                </div>\n                <div className=\"col-sm-4\">\n                </div>\n            </div>\n        </div>\n    )\n}\n\nfunction GolosTemplates() {\n    return (\n        <div className=\"card-body\">\n            <Link to={\"/templates/golos/upvote\"}>upvote</Link>\n        </div>\n    )\n}\n\nexport default \nfunction TemplateOverview(props) {\n\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-sm-6 mb-3\">\n                    <h3>Transaction templates</h3>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-6 mb-3\">\n                    <div className=\"card\">\n                        <div className=\"card-header\">\n                            <h4>Cyberway</h4>\n                        </div>                    \n                        <CyberwayTemplates />\n                    </div>\n                </div>\n                <div className=\"col-sm-6 mb-3\">\n                    <div className=\"card\">\n                            <div className=\"card-header\">\n                                <h4>Golos</h4>\n                            </div>                    \n                            <GolosTemplates />\n                        </div>\n                    </div>\n            </div>\n        </div>\n    );\n\n}","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"\n\nimport Signing from \"./components/signing\";\nimport NavBar from \"./navbar\";\n\n\nimport Bidname from \"./components/templates/cyberway/bidname\";\nimport Bidrefund from \"./components/templates/cyberway/bidrefund\";\nimport Transfer from \"./components/templates/cyberway/transfer\";\nimport TempaltesOverview from \"./components/templates/overview\"\n\nfunction App(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <NavBar />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <div>\n            <Router>\n              <Switch>\n                <Route exact path=\"/\">\n                  <h1>Signing tool for cyberway!</h1>\n                </Route>\n                <Route exact path=\"/signing\">\n                  <Signing props={{ ...props }} />\n                </Route>\n                <Route exact path=\"/templates/\">\n                  <TempaltesOverview props={{ ...props }} />\n                </Route>\n                <Route exact path=\"/templates/cyberway/bidname\">\n                  <Bidname props={{ ...props }} />\n                </Route>\n                <Route exact path=\"/templates/cyberway/bidrefund\">\n                  <Bidrefund props={{ ...props }} />\n                </Route>\n                <Route exact path=\"/templates/cyberway/transfer\">\n                  <Transfer props={{ ...props }} />\n                </Route>\n              </Switch>\n            </Router>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}